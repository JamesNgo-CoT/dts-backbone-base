{"version":3,"sources":["script.min.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","Backbone","Model","Base","extend","attributeTypes","initialize","set","attrs","opts","arguments","this","k","hasOwnProperty","Function","bind","apply","Boolean","concat","valueOf","Number","String","call","Collection","View"],"mappings":"AAAA,aAEA,IAAIA,QAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,GAEtQ,SAASG,mBAAmBC,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,IAAIG,EAAI,EAAGC,EAAOH,MAAMD,EAAIK,QAASF,EAAIH,EAAIK,OAAQF,IAAOC,EAAKD,GAAKH,EAAIG,GAAM,OAAOC,EAAe,OAAOH,MAAMK,KAAKN,GAE1L,SAASO,gBAAgBX,EAAKY,EAAKC,GAAiK,OAApJD,KAAOZ,EAAOc,OAAOC,eAAef,EAAKY,GAAOC,MAAOA,EAAOG,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBlB,EAAIY,GAAOC,EAAgBb,EAI3MmB,SAASC,MAAMC,KAAOF,SAASC,MAAME,QACnCC,kBAEAC,WAAY,aAEZC,IAAK,SAAaC,EAAOC,GASvB,GANqB,iBAAVD,IACTA,EAAQf,mBAAoBe,EAAOC,GACnCA,EAAOC,UAAU,QAIfC,KAAKN,gBAAmD,WAAjC1B,QAAQgC,KAAKN,gBACtC,IAAK,IAAIO,KAAKD,KAAKN,eACjB,GAAIM,KAAKN,eAAeQ,eAAeD,IAAMD,KAAKN,eAAeO,IAAMJ,EAAMK,eAAeD,IAAMJ,EAAMI,GAAI,CAI1G,IAAIjB,EAAQR,MAAMC,QAAQoB,EAAMI,IAAMJ,EAAMI,IAAMJ,EAAMI,IAExD,GAAsC,iBAA3BD,KAAKN,eAAeO,GAC7B,OAAQjB,GACN,IAAK,UACHa,EAAMI,IAAK,IAAKE,SAAS9B,UAAU+B,KAAKC,MAAMC,SAAU,MAAMC,OAAOjC,mBAAmBU,OAAYwB,UACpG,MAEF,IAAK,SACHX,EAAMI,IAAK,IAAKE,SAAS9B,UAAU+B,KAAKC,MAAMI,QAAS,MAAMF,OAAOjC,mBAAmBU,OAAYwB,UACnG,MAEF,IAAK,SACHX,EAAMI,IAAK,IAAKE,SAAS9B,UAAU+B,KAAKC,MAAMK,QAAS,MAAMH,OAAOjC,mBAAmBU,OAAYwB,UACnG,MAEF,IAAK,WACHX,EAAMI,GAAK,IAAKE,SAAS9B,UAAU+B,KAAKC,MAAMF,UAAW,MAAMI,OAAOjC,mBAAmBU,UAGnE,mBAAVA,IAChBa,EAAMI,GAAK,IAAKE,SAAS9B,UAAU+B,KAAKC,MAAML,KAAKN,eAAeO,IAAK,MAAMM,OAAOjC,mBAAmBU,OAM/GM,SAASC,MAAMlB,UAAUuB,IAAIe,KAAKX,KAAMH,EAAOC,MAMnDR,SAASsB,WAAWpB,KAAOF,SAASsB,WAAWnB,WAI/CH,SAASuB,KAAKrB,KAAOF,SAASuB,KAAKpB","file":"script.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* global Backbone */\n\nBackbone.Model.Base = Backbone.Model.extend({\n  attributeTypes: {},\n\n  initialize: function initialize() {},\n\n  set: function set(attrs, opts) {\n\n    // Format arguments to remove variations.\n    if (typeof attrs === 'string') {\n      attrs = _defineProperty({}, attrs, opts);\n      opts = arguments[2] || {};\n    }\n\n    // Format attribute values based on attibute types extention property.\n    if (this.attributeTypes && _typeof(this.attributeTypes) === 'object') {\n      for (var k in this.attributeTypes) {\n        if (this.attributeTypes.hasOwnProperty(k) && this.attributeTypes[k] && attrs.hasOwnProperty(k) && attrs[k]) {\n\n          // Format value into array for spread operator when providing\n          // arguments to constructors.\n          var value = Array.isArray(attrs[k]) ? attrs[k] : [attrs[k]];\n\n          if (typeof this.attributeTypes[k] === 'string') {\n            switch (value) {\n              case 'boolean':\n                attrs[k] = new (Function.prototype.bind.apply(Boolean, [null].concat(_toConsumableArray(value))))().valueOf();\n                break;\n\n              case 'number':\n                attrs[k] = new (Function.prototype.bind.apply(Number, [null].concat(_toConsumableArray(value))))().valueOf();\n                break;\n\n              case 'string':\n                attrs[k] = new (Function.prototype.bind.apply(String, [null].concat(_toConsumableArray(value))))().valueOf();\n                break;\n\n              case 'function':\n                attrs[k] = new (Function.prototype.bind.apply(Function, [null].concat(_toConsumableArray(value))))();\n                break;\n            }\n          } else if (typeof value === 'function') {\n            attrs[k] = new (Function.prototype.bind.apply(this.attributeTypes[k], [null].concat(_toConsumableArray(value))))();\n          }\n        }\n      }\n    }\n\n    Backbone.Model.prototype.set.call(this, attrs, opts);\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////\n\nBackbone.Collection.Base = Backbone.Collection.extend({});\n\n////////////////////////////////////////////////////////////////////////////////\n\nBackbone.View.Base = Backbone.View.extend({});"]}